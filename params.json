{
  "name": "Awesome Go Patterns",
  "tagline": " A curated list of Go patterns and idioms",
  "body": "# Go Patterns [![Travis Widget]][Travis] [![Awesome Widget]][Awesome] [![License Widget]][License]\r\n[Awesome Widget]: https://img.shields.io/badge/awesome-%E2%9C%93-ff69b4.svg?style=flat-square\r\n[Awesome]: https://github.com/sindresorhus/awesome\r\n[Travis Widget]: https://img.shields.io/travis/tmrts/go-patterns.svg?style=flat-square\r\n[Travis]: http://travis-ci.org/tmrts/go-patterns\r\n[License Widget]: https://img.shields.io/badge/license-Creative%20Commons%204.0-E91E63.svg?style=flat-square\r\n[License]: http://creativecommons.org/licenses/by/4.0/\r\nA curated collection of idiomatic design & application patterns for Go language.\r\n\r\n__Creational Patterns__:\r\n\r\n| Pattern | Description |\r\n|:-------:| ----------- |\r\n| [Abstract Factory](abstract_factory.go) | Provides an interface for creating families of releated objects |\r\n| [Builder](builder/builder.go) | Builds a complex object using simple objects |\r\n| [Factory Method](factory_method.go) | Defers instantiation of an object to a specialized function for creating instances |\r\n| [Object Pool](object_pool/pool.go) | Instantiates and maintains a group of objects instances of the same type |\r\n| [Singleton](singleton/singleton.go) | Restricts instantiation of a class to one object |\r\n\r\n__Structural Patterns__:\r\n\r\n| Pattern | Description |\r\n|:-------:| ----------- |\r\n| [Adapter](adapter.go) | Adapts otherwise incompatible interfaces to work together by adapting one to the other |\r\n| [Bridge](bridge.go) | Decouples an interface from its implementation so that the two can vary independently |\r\n| [Composite](composite.go) | Encapsulates and provides access to a number of different objects |\r\n| [Decorator](structural/decorator.md) | Adds behavior to an object, statically or dynamically |\r\n| [Facade](facade.go) | Uses one class as an API to a number of others |\r\n| [Flyweight](flyweight.go) | Reuses existing instances of objects with similar/identical state to minimize resource usage |\r\n| [Model View Controller](mvc.go) | Divides an app into three interconnected parts to separate internal representation from presentation to user |\r\n| [Proxy](proxy.go) | Provides a surrogate for an object to control it's actions |\r\n\r\n__Behavioral Patterns__:\r\n\r\n| Pattern | Description |\r\n|:-------:| ----------- |\r\n| [Chain of Responsibility](chain_of_responsibility.go) | Avoids coupling a sender to receiver by giving more than object a chance to handle the request |\r\n| [Command](command.go) | Bundles a command and arguments to call later |\r\n| [Mediator](mediator.go) | Connects objects and acts as a proxy |\r\n| [Memento](memento.go) | Generate an opaque token that can be used to go back to a previous state |\r\n| [Observer](observer.go) | Provide a callback for notification of events/changes to data |\r\n| [Registry](registry.go) | Keep track of all subclasses of a given class |\r\n| [State](state.go) | Encapsulates varying behavior for the same object based on its internal state |\r\n| [Strategy](behavioral/strategy.md) | Enables an algorithm's behavior to be selected at runtime |\r\n| [Template](template.go) | Defines a skeleton class which defers some methods to subclasses |\r\n| [Visitor](visitor.go) | Separates an algorithm from an object on which it operates |\r\n \r\n__Synchronization Patterns__:\r\n\r\n| Pattern | Description |\r\n|:-------:| ----------- |\r\n| [Condition Variable](condition_variable.go) | Provides a mechanism for threads to temporarily give up access in order to wait for some condition |\r\n| [Lock/Mutex](mutex/mutex.go) | Enforces mutual exclusion limit on a resource to gain exclusive access |\r\n| [Monitor](monitor.go) | Combination of mutex and condition variable patterns |\r\n| [Read-Write Lock](read_write_lock.go) | Allows parallel read access, but only exclusive access on write operations to a resource |\r\n| [Semaphore](synchronization/semaphore.md) | Allows controlling access to a common resource |\r\n\r\n__Concurrency Patterns__:\r\n\r\n| Pattern | Description |\r\n|:-------:| ----------- |\r\n| [N-Barrier](barrier.go) | Prevents a process from proceeding until all N processes reach to the barrier |\r\n| [Bounded Parallelism](bounded_parallelism/md5.go) | Completes large number of indenpendent tasks with resource limits |\r\n| [Broadcast](broadcast.go) | Transfers a message to all recipients simultaneously |\r\n| [Coroutines](coroutine/coroutine.go) | Subroutines that allow suspending and resuming execution at certain locations |\r\n| [Generators](generator.go) | Yields a sequence of values one at a time |\r\n| [Reactor](reactor.go) | Demultiplexes service requests delivered concurrently to a service handler and dispatches them syncronously to the associated request handlers |\r\n| [Parallelism](parallelism/md5.go) | Completes large number of indenpendent tasks |\r\n| [Producer Consumer](producer_consumer.go) | Separates tasks from task executions |\r\n| [Scheduler](scheduler.go) | Orchestrates steps to be performed as part of a task |\r\n\r\n__Messaging Patterns__:\r\n\r\n| Pattern | Description |\r\n|:-------:| ----------- |\r\n| [Fan-In](messaging/fan_in.md) | Funnels tasks to a work sink (e.g. server) |\r\n| [Fan-Out](messaging/fan_out.md) | Distributes tasks amongs workers (e.g. producer) |\r\n| [Futures & Promises](futures_promises.go) | Acts as a place-holder of a result that is initally unknown for synchronization purposes |\r\n| [Publish/Subscribe](messaging/publish_subscribe.md) | Passes information to a collection of recipients who subscribed to a topic |\r\n| [Push & Pull](push_pull.go) | Distributes messages to multiple workers, arranged in a pipeline |\r\n\r\n__Stability Patterns__:\r\n\r\n| Pattern | Description |\r\n|:-------:| ----------- |\r\n| [Bulkheads](bulkhead.go)  | Enforces a principle of failure containment (i.e. prevents cascading failures) |\r\n| [Circuit-Breaker](circuitbreaker/circuit_breaker.go) | Stops the flow of the requests when requests are likely to fail |\r\n| [Deadline](deadline.go) | Allows clients to stop waiting for a response once the probability of response becomes low (e.g. after waiting 10 seconds for a page refresh)|\r\n| [Fail-Fast](fail_fast.go) | Checks the availability of required resources at the start of a request and fails if the requirements are not satisfied |\r\n| [Handshaking](handshaking.go) | Asks a component if it can take any more load, if it can't the request is declined |\r\n| [Steady-State](steady_state.go) | For every service that accumulates a resource, some other service must recycle that resource |\r\n\r\n__Profiling Patterns__:\r\n\r\n| Pattern | Description |\r\n|:-------:| ----------- |\r\n| [Timing Functions](timing.go) | Wraps a function and logs the execution |\r\n\r\n__Idioms__:\r\n\r\n| Pattern | Description |\r\n|:-------:| ----------- |\r\n| [Functional Options](idiom/functional_options.md) | Allows creating clean APIs with sane defaults and idiomatic overrides |\r\n\r\n__Anti-Patterns__:\r\n\r\n| Pattern | Description |\r\n|:-------:| ----------- |\r\n| [Cascading Failures]() | A failure in a system of interconnected parts in which the failure of a part causes a domino effect |\r\n\r\n__Other Patterns__:\r\n\r\n| Pattern | Description |\r\n|:-------:| ----------- |\r\n\r\n# License\r\n\r\n[![Creative Commons License](http://i.creativecommons.org/l/by/4.0/88x31.png)](http://creativecommons.org/licenses/by/4.0/)\r\n\r\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}