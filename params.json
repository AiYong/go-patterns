{"name":"Awesome Go Patterns","tagline":" A curated list of Go patterns and idioms","body":"# Go Patterns\r\nA curated collection of common patterns & idioms for Go.\r\n\r\n__Creational Patterns__:\r\n\r\n| Pattern | Description |\r\n|:-------:| ----------- |\r\n| [abstract_factory](abstract_factory.go) | use a generic function with specific factories |\r\n| [borg](borg.go) | a singleton with shared-state among instances |\r\n| [builder](builder.go) | instead of using multiple constructors, builder object receives parameters and returns constructed objects |\r\n| [factory_method](factory_method.go) | delegate a specialized function/method to create instances |\r\n| [lazy_evaluation](lazy_evaluation.go) | lazily-evaluated property pattern in Go |\r\n| [pool](pool.go) | preinstantiate and maintain a group of instances of the same type |\r\n| [prototype](prototype.go) | use a factory and clones of a prototype for new instances (if instantiation is expensive) |\r\n\r\n__Structural Patterns__:\r\n\r\n| Pattern | Description |\r\n|:-------:| ----------- |\r\n| [3-tier](3-tier.go) | data<->business logic<->presentation separation (strict relationships) |\r\n| [adapter](adapter.go) | adapt one interface to another using a white-list |\r\n| [bridge](bridge.go) | a client-provider middleman to soften interface changes |\r\n| [composite](composite.go) | encapsulate and provide access to a number of different objects |\r\n| [decorator](decorator.go) | wrap functionality with other functionality in order to affect outputs |\r\n| [facade](facade.go) | use one class as an API to a number of others |\r\n| [flyweight](flyweight.go) | transparently reuse existing instances of objects with similar/identical state |\r\n| [front_controller](front_controller.go) | single handler requests coming to the application |\r\n| [mvc](mvc.go) | model<->view<->controller (non-strict relationships) |\r\n| [proxy](proxy.go) | an object funnels operations to something else |\r\n\r\n__Behavioral Patterns__:\r\n\r\n| Pattern | Description |\r\n|:-------:| ----------- |\r\n| [chain](chain.go) | apply a chain of successive handlers to try and process the data |\r\n| [catalog](catalog.go) | general methods will call different specialized methods based on construction parameter |\r\n| [chaining_method](chaining_method.go) | continue callback next object method |\r\n| [command](command.go) | bundle a command and arguments to call later |\r\n| [mediator](mediator.go) | an object that knows how to connect other objects and act as a proxy |\r\n| [memento](memento.go) | generate an opaque token that can be used to go back to a previous state |\r\n| [observer](observer.go) | provide a callback for notification of events/changes to data |\r\n| [publish_subscribe](publish_subscribe.go) | a source syndicates events/data to 0+ registered listeners |\r\n| [registry](registry.go) | keep track of all subclasses of a given class |\r\n| [specification](specification.go) |  business rules can be recombined by chaining the business rules together using boolean logic |\r\n| [state](state.go) | logic is organized into a discrete number of potential states and the next state that can be transitioned to |\r\n| [strategy](strategy.go) | selectable operations over the same data |\r\n| [template](template.go) | an object imposes a structure but takes pluggable components |\r\n| [visitor](visitor.go) | invoke a callback for all items of a collection |\r\n \r\n__Concurrency Patterns__:\r\n\r\n| Pattern | Description |\r\n|:-------:| ----------- |\r\n| [semaphore](semaphore.go) | data type for controlling access, to a common resource|\r\n\r\n# License\r\n\r\n[![Creative Commons License](http://i.creativecommons.org/l/by/4.0/88x31.png)](http://creativecommons.org/licenses/by/4.0/)\r\n\r\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}